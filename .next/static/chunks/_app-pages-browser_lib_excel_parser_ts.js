/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_excel_parser_ts"],{

/***/ "(app-pages-browser)/./lib/date-utils.ts":
/*!***************************!*\
  !*** ./lib/date-utils.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   areSameDay: () => (/* binding */ areSameDay),\n/* harmony export */   daysBetween: () => (/* binding */ daysBetween),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   getMondayOfWeek: () => (/* binding */ getMondayOfWeek),\n/* harmony export */   getWeekIdentifier: () => (/* binding */ getWeekIdentifier),\n/* harmony export */   isValidDateString: () => (/* binding */ isValidDateString),\n/* harmony export */   normalizeDateToWeek: () => (/* binding */ normalizeDateToWeek),\n/* harmony export */   parseFlexibleDate: () => (/* binding */ parseFlexibleDate)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/isValid.js\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/parse.js\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/format.js\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/startOfWeek.js\");\n\n/**\n * Parses various date formats into a Date object\n * Supports Excel dates, ISO strings, and common date formats\n */ function parseFlexibleDate(dateValue) {\n    if (!dateValue) return null;\n    // Already a valid Date object\n    if (dateValue instanceof Date && (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(dateValue)) {\n        return dateValue;\n    }\n    // Excel date number (days since 1900-01-01, with Excel's leap year bug)\n    if (typeof dateValue === 'number' && dateValue > 0) {\n        // Excel dates: number of days since 1900-01-01 (with leap year bug for 1900)\n        const excelEpoch = new Date(1900, 0, 1);\n        const msPerDay = 24 * 60 * 60 * 1000;\n        // Subtract 2 to account for Excel's leap year bug (1900 not a leap year) and 0-indexing\n        const date = new Date(excelEpoch.getTime() + (dateValue - 2) * msPerDay);\n        if ((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(date)) return date;\n    }\n    // String date\n    if (typeof dateValue === 'string') {\n        const dateStr = dateValue.trim();\n        // Try parsing as ISO date\n        const isoDate = new Date(dateStr);\n        if ((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(isoDate)) {\n            return isoDate;\n        }\n        // Try common date formats\n        const formats = [\n            'yyyy-MM-dd',\n            'MM/dd/yyyy',\n            'M/d/yyyy',\n            'dd/MM/yyyy',\n            'd/M/yyyy',\n            'MMM d yyyy',\n            'd-MMM-yyyy',\n            'yyyy/MM/dd',\n            'dd-MM-yyyy',\n            'MM-dd-yyyy'\n        ];\n        for (const fmt of formats){\n            try {\n                const parsed = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.parse)(dateStr, fmt, new Date());\n                if ((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(parsed)) {\n                    return parsed;\n                }\n            } catch (e) {\n            // Continue to next format\n            }\n        }\n    }\n    return null;\n}\n/**\n * Formats a date consistently as yyyy-MM-dd\n */ function formatDate(date) {\n    const parsed = typeof date === 'string' || typeof date === 'number' ? parseFlexibleDate(date) : date;\n    if (!parsed || !(0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(parsed)) {\n        return (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(new Date(), 'yyyy-MM-dd');\n    }\n    return (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(parsed, 'yyyy-MM-dd');\n}\n/**\n * Gets the Monday of the week for a given date\n */ function getMondayOfWeek(date) {\n    const parsed = typeof date === 'string' || typeof date === 'number' ? parseFlexibleDate(date) : date;\n    if (!parsed || !(0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(parsed)) {\n        return (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)(new Date(), {\n            weekStartsOn: 1\n        });\n    }\n    return (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.startOfWeek)(parsed, {\n        weekStartsOn: 1\n    });\n}\n/**\n * Gets week identifier in format \"YYYY-WW\"\n */ function getWeekIdentifier(date) {\n    const monday = getMondayOfWeek(date);\n    return (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(monday, \"yyyy-'W'II\");\n}\n/**\n * Normalizes a date to Monday of its week and returns both date and week strings\n */ function normalizeDateToWeek(dateValue) {\n    const parsed = parseFlexibleDate(dateValue);\n    if (!parsed) {\n        // Fallback to current week\n        const now = new Date();\n        const monday = getMondayOfWeek(now);\n        return {\n            date: formatDate(monday),\n            week: getWeekIdentifier(monday)\n        };\n    }\n    const monday = getMondayOfWeek(parsed);\n    return {\n        date: formatDate(monday),\n        week: getWeekIdentifier(monday)\n    };\n}\n/**\n * Checks if a date string is in a valid format\n */ function isValidDateString(dateStr) {\n    const parsed = parseFlexibleDate(dateStr);\n    return parsed !== null && (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_0__.isValid)(parsed);\n}\n/**\n * Compares two dates for equality (ignoring time)\n */ function areSameDay(date1, date2) {\n    const d1 = parseFlexibleDate(date1);\n    const d2 = parseFlexibleDate(date2);\n    if (!d1 || !d2) return false;\n    return formatDate(d1) === formatDate(d2);\n}\n/**\n * Gets the number of days between two dates\n */ function daysBetween(startDate, endDate) {\n    const start = parseFlexibleDate(startDate);\n    const end = parseFlexibleDate(endDate);\n    if (!start || !end) return 0;\n    const msPerDay = 24 * 60 * 60 * 1000;\n    return Math.floor((end.getTime() - start.getTime()) / msPerDay);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/date-utils.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/excel/parser.ts":
/*!*****************************!*\
  !*** ./lib/excel/parser.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseExcelFile: () => (/* binding */ parseExcelFile)\n/* harmony export */ });\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n/* harmony import */ var _lib_date_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/date-utils */ \"(app-pages-browser)/./lib/date-utils.ts\");\n/* harmony import */ var _validator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validator */ \"(app-pages-browser)/./lib/excel/validator.ts\");\n\n\n\n\n// Wrapper function for backward compatibility\nfunction normalizeDateToMonday(dateValue) {\n    return (0,_lib_date_utils__WEBPACK_IMPORTED_MODULE_1__.normalizeDateToWeek)(dateValue);\n}\nasync function parseExcelFile(file) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (e)=>{\n            try {\n                var _e_target;\n                // Only log essential info for debugging\n                const DEBUG = false // Set to true for detailed logging\n                ;\n                if (DEBUG) {\n                    console.log('📊 Starting Excel parsing...', {\n                        fileSize: file.size\n                    });\n                }\n                if (!((_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result)) {\n                    throw new Error('Failed to read file content');\n                }\n                const data = new Uint8Array(e.target.result);\n                const workbook = xlsx__WEBPACK_IMPORTED_MODULE_3__.read(data, {\n                    type: 'array',\n                    cellDates: true\n                });\n                if (!workbook.Sheets || Object.keys(workbook.Sheets).length === 0) {\n                    throw new Error('No sheets found in the Excel file');\n                }\n                const result = parseWorkbook(workbook);\n                // Only log summary on success\n                console.log(\"✅ Excel parsed: \".concat(result.employees.length, \" employees, \").concat(result.projects.length, \" projects, \").concat(result.assignments.length, \" assignments\"));\n                // Validate the parsed data\n                const validation = (0,_validator__WEBPACK_IMPORTED_MODULE_2__.validateExcelData)({\n                    employees: result.employees,\n                    projects: result.projects,\n                    assignments: result.assignments\n                });\n                if (!validation.isValid) {\n                    const errorMessage = 'Excel validation failed:\\n' + validation.errors.join('\\n');\n                    throw new Error(errorMessage);\n                }\n                // Log warnings if any\n                if (validation.warnings.length > 0) {\n                    console.warn('⚠️ Excel validation warnings:', validation.warnings);\n                }\n                resolve(result);\n            } catch (error) {\n                console.error('❌ Error parsing Excel:', error);\n                if (error instanceof Error) {\n                    reject(error);\n                } else {\n                    reject(new Error('Unknown error occurred while parsing Excel file'));\n                }\n            }\n        };\n        reader.onerror = (error)=>{\n            console.error('❌ FileReader error:', error);\n            reject(new Error('Failed to read file. Please try again.'));\n        };\n        reader.readAsArrayBuffer(file);\n    });\n}\nfunction parseWorkbook(workbook) {\n    const result = {\n        employees: [],\n        projects: [],\n        assignments: [],\n        skills: [],\n        teams: [\n            'All Teams'\n        ]\n    };\n    // Parse Employees sheet\n    if (workbook.Sheets['Employees']) {\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.sheet_to_json(workbook.Sheets['Employees']);\n        result.employees = sheet.map((row)=>({\n                id: row.ID || row.id || (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                name: row.Name || row.Employee || '',\n                email: row.Email || '',\n                maxHours: Number(row['Max Hours']) || 40,\n                team: row.Team || 'Default',\n                skills: parseSkills(row)\n            }));\n    }\n    // Parse Projects sheet\n    if (workbook.Sheets['Projects']) {\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.sheet_to_json(workbook.Sheets['Projects']);\n        result.projects = sheet.map((row)=>({\n                id: row.ID || row.id || (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                name: row.Name || row.Project || '',\n                startDate: (0,_lib_date_utils__WEBPACK_IMPORTED_MODULE_1__.parseFlexibleDate)(row['Start Date']) || new Date(),\n                endDate: (0,_lib_date_utils__WEBPACK_IMPORTED_MODULE_1__.parseFlexibleDate)(row['End Date']) || new Date(),\n                requiredSkills: row['Required Skills'] ? String(row['Required Skills']).split(',').map((s)=>s.trim()) : [],\n                portfolio: row.Portfolio || ''\n            }));\n    }\n    // Parse Assignments sheet\n    if (workbook.Sheets['Assignments']) {\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.sheet_to_json(workbook.Sheets['Assignments']);\n        // Check if this is pivot-style format (columns are dates)\n        const firstRow = sheet[0] || {};\n        const columns = Object.keys(firstRow);\n        const dateColumns = columns.filter((col)=>{\n            // Check if column name looks like a date\n            return /^\\d{4}-\\d{2}-\\d{2}/.test(col) || /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}/.test(col) || /^[A-Z][a-z]{2}\\s+\\d{1,2}/.test(col);\n        });\n        if (dateColumns.length > 0) {\n            // Pivot format: Each row is employee-project, columns are week dates\n            result.assignments = [];\n            sheet.forEach((row, rowIndex)=>{\n                const employeeIdOrName = row.Employee || row['Employee'] || row['Employee ID'] || '';\n                const projectIdOrName = row.Project || row['Project'] || row['Project ID'] || '';\n                if (!employeeIdOrName || !projectIdOrName) {\n                    // Skip invalid rows silently\n                    return;\n                }\n                // Try to find employee by ID first, then by name\n                let employeeId = employeeIdOrName;\n                const employeeById = result.employees.find((e)=>e.id === employeeIdOrName);\n                const employeeByName = result.employees.find((e)=>e.name === employeeIdOrName);\n                if (!employeeById && employeeByName) {\n                    employeeId = employeeByName.id;\n                }\n                // Try to find project by ID first, then by name\n                let projectId = projectIdOrName;\n                const projectById = result.projects.find((p)=>p.id === projectIdOrName);\n                const projectByName = result.projects.find((p)=>p.name === projectIdOrName);\n                if (!projectById && projectByName) {\n                    projectId = projectByName.id;\n                }\n                // Process each date column\n                dateColumns.forEach((dateCol)=>{\n                    const hours = row[dateCol];\n                    if (hours && Number(hours) > 0) {\n                        const { date, week } = normalizeDateToMonday(dateCol);\n                        const assignment = {\n                            id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                            employeeId: employeeId,\n                            projectId: projectId,\n                            hours: Number(hours),\n                            week: week,\n                            date: date\n                        };\n                        result.assignments.push(assignment);\n                    }\n                });\n            });\n        } else {\n            // Traditional format: Each row is one assignment\n            result.assignments = sheet.map((row, index)=>{\n                // Check all possible column names for week/date\n                const rawDate = row.Week || row['Week'] || row.Date || row['Date'] || row.week || row.date;\n                const { date, week } = normalizeDateToMonday(rawDate);\n                // Parse hours with better handling\n                const rawHours = row.Hours || row['Hours'] || row.hours || 0;\n                const parsedHours = typeof rawHours === 'string' ? parseFloat(rawHours) || 0 : Number(rawHours) || 0;\n                const employeeIdOrName = row['Employee ID'] || row.Employee || row['Employee'] || row['employee'] || '';\n                const projectIdOrName = row['Project ID'] || row.Project || row['Project'] || row['project'] || '';\n                // Try to find employee by ID first, then by name\n                let employeeId = employeeIdOrName;\n                const employeeById = result.employees.find((e)=>e.id === employeeIdOrName);\n                const employeeByName = result.employees.find((e)=>e.name === employeeIdOrName);\n                if (!employeeById && employeeByName) {\n                    employeeId = employeeByName.id;\n                }\n                // Try to find project by ID first, then by name\n                let projectId = projectIdOrName;\n                const projectById = result.projects.find((p)=>p.id === projectIdOrName);\n                const projectByName = result.projects.find((p)=>p.name === projectIdOrName);\n                if (!projectById && projectByName) {\n                    projectId = projectByName.id;\n                }\n                const assignment = {\n                    id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                    employeeId: employeeId,\n                    projectId: projectId,\n                    hours: parsedHours,\n                    week: week,\n                    date: date // New: Store full date in yyyy-MM-dd format\n                };\n                // Assignment created\n                return assignment;\n            });\n        }\n    } else {\n    // No assignments sheet found\n    }\n    // Parse Skills sheet (optional)\n    if (workbook.Sheets['Skills']) {\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.sheet_to_json(workbook.Sheets['Skills']);\n        const skillSet = new Set();\n        sheet.forEach((row)=>{\n            Object.keys(row).forEach((key)=>{\n                if (key !== 'Employee' && key !== 'ID' && key !== 'Name') {\n                    skillSet.add(key);\n                }\n            });\n        });\n        result.skills = Array.from(skillSet);\n    } else {\n        // Extract skills from employees\n        const skillSet = new Set();\n        result.employees.forEach((emp)=>{\n            Object.keys(emp.skills).forEach((skill)=>skillSet.add(skill));\n        });\n        result.skills = Array.from(skillSet);\n    }\n    // Extract teams\n    const teamSet = new Set([\n        'All Teams'\n    ]);\n    result.employees.forEach((emp)=>{\n        if (emp.team) teamSet.add(emp.team);\n    });\n    result.teams = Array.from(teamSet);\n    return result;\n}\nfunction parseSkills(row) {\n    const skills = {};\n    const excludeFields = [\n        'Name',\n        'Employee',\n        'Email',\n        'ID',\n        'id',\n        'Max Hours',\n        'Team'\n    ];\n    Object.keys(row).forEach((key)=>{\n        if (!excludeFields.includes(key)) {\n            const value = row[key];\n            if (value && value !== 'None' && value !== '') {\n                // Try to parse as proficiency level\n                if ([\n                    'Beginner',\n                    'Intermediate',\n                    'Expert'\n                ].includes(value)) {\n                    skills[key] = value;\n                } else if (typeof value === 'number') {\n                    // Convert numeric values to proficiency levels\n                    if (value >= 3) skills[key] = 'Expert';\n                    else if (value >= 2) skills[key] = 'Intermediate';\n                    else if (value >= 1) skills[key] = 'Beginner';\n                } else if (value) {\n                    // Default to Intermediate for any other non-empty value\n                    skills[key] = 'Intermediate';\n                }\n            }\n        }\n    });\n    return skills;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/excel/parser.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/excel/validator.ts":
/*!********************************!*\
  !*** ./lib/excel/validator.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateAssignment: () => (/* binding */ validateAssignment),\n/* harmony export */   validateEmployee: () => (/* binding */ validateEmployee),\n/* harmony export */   validateExcelData: () => (/* binding */ validateExcelData),\n/* harmony export */   validateProject: () => (/* binding */ validateProject)\n/* harmony export */ });\n/**\n * Validates employee data from Excel\n */ function validateEmployee(employee, index) {\n    const errors = [];\n    const warnings = [];\n    // Required fields\n    if (!employee.id && !employee.ID && !employee.Name && !employee.name) {\n        errors.push(\"Row \".concat(index + 2, \": Employee must have an ID or Name\"));\n    }\n    // Validate max hours\n    const maxHours = employee['Max Hours'] || employee.maxHours || employee['max hours'];\n    if (maxHours !== undefined) {\n        const hours = Number(maxHours);\n        if (isNaN(hours) || hours < 0) {\n            errors.push(\"Row \".concat(index + 2, \": Invalid max hours value: \").concat(maxHours));\n        } else if (hours > 80) {\n            warnings.push(\"Row \".concat(index + 2, \": Unusually high max hours: \").concat(hours));\n        }\n    }\n    // Validate email format if provided\n    const email = employee.Email || employee.email;\n    if (email && !isValidEmail(email)) {\n        warnings.push(\"Row \".concat(index + 2, \": Invalid email format: \").concat(email));\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        warnings\n    };\n}\n/**\n * Validates project data from Excel\n */ function validateProject(project, index) {\n    const errors = [];\n    const warnings = [];\n    // Required fields\n    if (!project.id && !project.ID && !project.Name && !project.name) {\n        errors.push(\"Row \".concat(index + 2, \": Project must have an ID or Name\"));\n    }\n    // Validate dates\n    const startDate = project['Start Date'] || project.startDate || project['start date'];\n    const endDate = project['End Date'] || project.endDate || project['end date'];\n    if (!startDate) {\n        errors.push(\"Row \".concat(index + 2, \": Project missing start date\"));\n    }\n    if (!endDate) {\n        errors.push(\"Row \".concat(index + 2, \": Project missing end date\"));\n    }\n    if (startDate && endDate) {\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        if (isNaN(start.getTime())) {\n            errors.push(\"Row \".concat(index + 2, \": Invalid start date format: \").concat(startDate));\n        }\n        if (isNaN(end.getTime())) {\n            errors.push(\"Row \".concat(index + 2, \": Invalid end date format: \").concat(endDate));\n        }\n        if (!isNaN(start.getTime()) && !isNaN(end.getTime()) && start > end) {\n            errors.push(\"Row \".concat(index + 2, \": Start date is after end date\"));\n        }\n        // Warn about projects longer than 2 years\n        if (!isNaN(start.getTime()) && !isNaN(end.getTime())) {\n            const durationDays = (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24);\n            if (durationDays > 730) {\n                warnings.push(\"Row \".concat(index + 2, \": Project duration exceeds 2 years\"));\n            }\n        }\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        warnings\n    };\n}\n/**\n * Validates assignment data from Excel\n */ function validateAssignment(assignment, index, employees, projects) {\n    const errors = [];\n    const warnings = [];\n    // Check employee reference\n    const employeeRef = assignment['Employee ID'] || assignment.Employee || assignment.employee || assignment.employeeId;\n    if (!employeeRef) {\n        errors.push(\"Row \".concat(index + 2, \": Assignment missing employee reference\"));\n    } else {\n        // Verify employee exists\n        const employeeExists = employees.some((e)=>e.id === employeeRef || e.name === employeeRef);\n        if (!employeeExists) {\n            errors.push(\"Row \".concat(index + 2, \": Employee not found: \").concat(employeeRef));\n        }\n    }\n    // Check project reference\n    const projectRef = assignment['Project ID'] || assignment.Project || assignment.project || assignment.projectId;\n    if (!projectRef) {\n        errors.push(\"Row \".concat(index + 2, \": Assignment missing project reference\"));\n    } else {\n        // Verify project exists\n        const projectExists = projects.some((p)=>p.id === projectRef || p.name === projectRef);\n        if (!projectExists) {\n            errors.push(\"Row \".concat(index + 2, \": Project not found: \").concat(projectRef));\n        }\n    }\n    // Validate hours\n    const hours = assignment.Hours || assignment.hours;\n    if (hours !== undefined && hours !== null && hours !== '') {\n        const hoursNum = Number(hours);\n        if (isNaN(hoursNum) || hoursNum < 0) {\n            errors.push(\"Row \".concat(index + 2, \": Invalid hours value: \").concat(hours));\n        } else if (hoursNum > 60) {\n            warnings.push(\"Row \".concat(index + 2, \": Unusually high hours for single assignment: \").concat(hoursNum));\n        }\n    }\n    // Check for date/week\n    const hasDate = assignment.Week || assignment.Date || assignment.week || assignment.date;\n    if (!hasDate) {\n        warnings.push(\"Row \".concat(index + 2, \": Assignment missing date/week\"));\n    }\n    return {\n        isValid: errors.length === 0,\n        errors,\n        warnings\n    };\n}\n/**\n * Validates the entire Excel data structure\n */ function validateExcelData(data) {\n    const allErrors = [];\n    const allWarnings = [];\n    // Check for required sheets\n    if (!data.employees || data.employees.length === 0) {\n        allErrors.push('No employees found in the Excel file');\n    }\n    if (!data.projects || data.projects.length === 0) {\n        allErrors.push('No projects found in the Excel file');\n    }\n    // Validate individual records\n    if (data.employees) {\n        data.employees.forEach((emp, i)=>{\n            const result = validateEmployee(emp, i);\n            allErrors.push(...result.errors);\n            allWarnings.push(...result.warnings);\n        });\n    }\n    if (data.projects) {\n        data.projects.forEach((proj, i)=>{\n            const result = validateProject(proj, i);\n            allErrors.push(...result.errors);\n            allWarnings.push(...result.warnings);\n        });\n    }\n    // Only validate assignments if we have valid employees and projects\n    if (data.assignments && data.employees && data.projects) {\n        // Convert to typed arrays for validation\n        const typedEmployees = data.employees;\n        const typedProjects = data.projects;\n        data.assignments.forEach((assign, i)=>{\n            const result = validateAssignment(assign, i, typedEmployees, typedProjects);\n            allErrors.push(...result.errors);\n            allWarnings.push(...result.warnings);\n        });\n    }\n    // Check for duplicate employee IDs\n    if (data.employees) {\n        const employeeIds = data.employees.map((e)=>e.id || e.ID || e.name || e.Name).filter(Boolean);\n        const duplicates = findDuplicates(employeeIds);\n        if (duplicates.length > 0) {\n            allWarnings.push(\"Duplicate employee IDs found: \".concat(duplicates.join(', ')));\n        }\n    }\n    // Check for duplicate project IDs\n    if (data.projects) {\n        const projectIds = data.projects.map((p)=>p.id || p.ID || p.name || p.Name).filter(Boolean);\n        const duplicates = findDuplicates(projectIds);\n        if (duplicates.length > 0) {\n            allWarnings.push(\"Duplicate project IDs found: \".concat(duplicates.join(', ')));\n        }\n    }\n    return {\n        isValid: allErrors.length === 0,\n        errors: allErrors,\n        warnings: allWarnings\n    };\n}\n/**\n * Helper function to validate email format\n */ function isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n/**\n * Helper function to find duplicates in an array\n */ function findDuplicates(arr) {\n    const seen = new Set();\n    const duplicates = new Set();\n    arr.forEach((item)=>{\n        if (seen.has(item)) {\n            duplicates.add(item);\n        }\n        seen.add(item);\n    });\n    return Array.from(duplicates);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/excel/validator.ts\n"));

/***/ }),

/***/ "?0b7b":
/*!*************************!*\
  !*** process (ignored) ***!
  \*************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* (ignored) */

/***/ }),

/***/ "?1bda":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* (ignored) */

/***/ })

}]);
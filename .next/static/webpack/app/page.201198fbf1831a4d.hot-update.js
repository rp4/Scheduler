"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/excel/parser.ts":
/*!*****************************!*\
  !*** ./lib/excel/parser.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseExcelFile: () => (/* binding */ parseExcelFile)\n/* harmony export */ });\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/isValid.js\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/format.js\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/parse.js\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/startOfWeek.js\");\n\n\n\n// Function to normalize date to yyyy-MM-dd format (Monday of the week)\nfunction normalizeDateToMonday(dateValue) {\n    let parsedDate = null;\n    // Handle Date objects from Excel parsing\n    if (dateValue instanceof Date && (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(dateValue)) {\n        parsedDate = dateValue;\n        console.log(\"    \\uD83D\\uDCC5 Processing Date object: \".concat((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(dateValue, 'yyyy-MM-dd')));\n    } else if (typeof dateValue === 'number' && dateValue > 0) {\n        parsedDate = new Date((dateValue - 25569) * 86400 * 1000);\n        console.log(\"    \\uD83D\\uDCC5 Excel number \".concat(dateValue, \" -> \").concat((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(parsedDate, 'yyyy-MM-dd')));\n    } else if (typeof dateValue === 'string') {\n        const dateStr = dateValue.trim();\n        // Priority: yyyy-MM-dd format\n        if (/^\\d{4}-\\d{2}-\\d{2}/.test(dateStr)) {\n            const dateOnly = dateStr.split('T')[0];\n            parsedDate = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.parse)(dateOnly, 'yyyy-MM-dd', new Date());\n            if ((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(parsedDate)) {\n                console.log(\"    \\uD83D\\uDCC5 Parsed yyyy-MM-dd: \".concat(dateOnly));\n            }\n        } else {\n            const formats = [\n                'MM/dd/yyyy',\n                'M/d/yyyy',\n                'MMM d yyyy',\n                'd-MMM-yyyy'\n            ];\n            for (const fmt of formats){\n                try {\n                    const parsed = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.parse)(dateStr, fmt, new Date());\n                    if ((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(parsed)) {\n                        parsedDate = parsed;\n                        console.log(\"    \\uD83D\\uDCC5 Parsed \".concat(fmt, \": \").concat(dateStr, \" -> \").concat((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(parsed, 'yyyy-MM-dd')));\n                        break;\n                    }\n                } catch (e) {}\n            }\n        }\n    }\n    // If we couldn't parse, use current date\n    if (!parsedDate || !(0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(parsedDate)) {\n        console.warn('    ⚠️ Could not parse date: \"'.concat(dateValue, '\", using current date'));\n        parsedDate = new Date();\n    }\n    // Convert to Monday of that week\n    const monday = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_4__.startOfWeek)(parsedDate, {\n        weekStartsOn: 1\n    });\n    const dateFormatted = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(monday, 'yyyy-MM-dd');\n    const weekFormatted = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(monday, 'MMM d').toUpperCase();\n    const dayName = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(parsedDate, 'EEEE');\n    if (parsedDate.getDay() === 1) {\n        console.log(\"    ✅ Date is already Monday: \".concat(dateFormatted, ' -> Week: \"').concat(weekFormatted, '\"'));\n    } else {\n        console.log(\"    \\uD83D\\uDCC5 Converted \".concat(dayName, \" \").concat((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.format)(parsedDate, 'yyyy-MM-dd'), \" -> Monday: \").concat(dateFormatted, ' (Week: \"').concat(weekFormatted, '\")'));\n    }\n    return {\n        date: dateFormatted,\n        week: weekFormatted\n    };\n}\nasync function parseExcelFile(file) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (e)=>{\n            try {\n                var _e_target;\n                console.log('📊 Starting Excel parsing...');\n                const data = new Uint8Array((_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result);\n                const workbook = xlsx__WEBPACK_IMPORTED_MODULE_5__.read(data, {\n                    type: 'array',\n                    cellDates: true\n                });\n                console.log('📋 Workbook sheets found:', Object.keys(workbook.Sheets));\n                const result = parseWorkbook(workbook);\n                console.log('✅ Parsing complete:', {\n                    employees: result.employees.length,\n                    projects: result.projects.length,\n                    assignments: result.assignments.length,\n                    skills: result.skills.length,\n                    teams: result.teams.length\n                });\n                resolve(result);\n            } catch (error) {\n                console.error('❌ Error parsing Excel:', error);\n                reject(error);\n            }\n        };\n        reader.onerror = ()=>reject(new Error('Failed to read file'));\n        reader.readAsArrayBuffer(file);\n    });\n}\nfunction parseWorkbook(workbook) {\n    const result = {\n        employees: [],\n        projects: [],\n        assignments: [],\n        skills: [],\n        teams: [\n            'All Teams'\n        ]\n    };\n    // Parse Employees sheet\n    if (workbook.Sheets['Employees']) {\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.sheet_to_json(workbook.Sheets['Employees']);\n        result.employees = sheet.map((row)=>({\n                id: row.ID || row.id || (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                name: row.Name || row.Employee || '',\n                email: row.Email || '',\n                maxHours: Number(row['Max Hours']) || 40,\n                team: row.Team || 'Default',\n                skills: parseSkills(row)\n            }));\n    }\n    // Parse Projects sheet\n    if (workbook.Sheets['Projects']) {\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.sheet_to_json(workbook.Sheets['Projects']);\n        result.projects = sheet.map((row)=>({\n                id: row.ID || row.id || (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                name: row.Name || row.Project || '',\n                startDate: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.parseDate)(row['Start Date']) || new Date(),\n                endDate: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.parseDate)(row['End Date']) || new Date(),\n                requiredSkills: row['Required Skills'] ? String(row['Required Skills']).split(',').map((s)=>s.trim()) : [],\n                portfolio: row.Portfolio || ''\n            }));\n    }\n    // Parse Assignments sheet\n    if (workbook.Sheets['Assignments']) {\n        console.log('📅 Parsing Assignments sheet...');\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.sheet_to_json(workbook.Sheets['Assignments']);\n        console.log(\"  Found \".concat(sheet.length, \" assignment rows\"));\n        // Log first few rows for debugging\n        if (sheet.length > 0) {\n            console.log('  Sample assignment row:', sheet[0]);\n            console.log('  Assignment column headers:', Object.keys(sheet[0]));\n        }\n        // Check if this is pivot-style format (columns are dates)\n        const firstRow = sheet[0] || {};\n        const columns = Object.keys(firstRow);\n        const dateColumns = columns.filter((col)=>{\n            // Check if column name looks like a date\n            return /^\\d{4}-\\d{2}-\\d{2}/.test(col) || /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}/.test(col) || /^[A-Z][a-z]{2}\\s+\\d{1,2}/.test(col);\n        });\n        if (dateColumns.length > 0) {\n            // Pivot format: Each row is employee-project, columns are week dates\n            console.log('  📊 Detected pivot-style format with date columns:', dateColumns.slice(0, 3));\n            result.assignments = [];\n            sheet.forEach((row, rowIndex)=>{\n                const employeeId = row.Employee || row['Employee'] || row['Employee ID'] || '';\n                const projectId = row.Project || row['Project'] || row['Project ID'] || '';\n                if (!employeeId || !projectId) {\n                    console.log(\"  ⚠️ Skipping row \".concat(rowIndex + 1, \": missing employee or project\"));\n                    return;\n                }\n                // Process each date column\n                dateColumns.forEach((dateCol)=>{\n                    const hours = row[dateCol];\n                    if (hours && Number(hours) > 0) {\n                        const { date, week } = normalizeDateToMonday(dateCol);\n                        const assignment = {\n                            id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                            employeeId: employeeId,\n                            projectId: projectId,\n                            hours: Number(hours),\n                            week: week,\n                            date: date\n                        };\n                        result.assignments.push(assignment);\n                        // Debug first few\n                        if (result.assignments.length <= 3) {\n                            console.log(\"  Assignment \".concat(result.assignments.length, \":\"), {\n                                employee: employeeId,\n                                project: projectId,\n                                date: date,\n                                week: week,\n                                hours: hours\n                            });\n                        }\n                    }\n                });\n            });\n            console.log(\"  ✓ Converted pivot format to \".concat(result.assignments.length, \" assignments\"));\n        } else {\n            // Traditional format: Each row is one assignment\n            result.assignments = sheet.map((row, index)=>{\n                // Check all possible column names for week/date\n                const rawDate = row.Week || row['Week'] || row.Date || row['Date'] || row.week || row.date;\n                const { date, week } = normalizeDateToMonday(rawDate);\n                // Parse hours with better handling\n                const rawHours = row.Hours || row['Hours'] || row.hours || 0;\n                const parsedHours = typeof rawHours === 'string' ? parseFloat(rawHours) || 0 : Number(rawHours) || 0;\n                const assignment = {\n                    id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                    employeeId: row['Employee ID'] || row.Employee || row['Employee'] || row['employee'] || '',\n                    projectId: row['Project ID'] || row.Project || row['Project'] || row['project'] || '',\n                    hours: parsedHours,\n                    week: week,\n                    date: date // New: Store full date in yyyy-MM-dd format\n                };\n                // Debug log for first few assignments\n                if (index < 3) {\n                    console.log(\"  Assignment \".concat(index + 1, \":\"), {\n                        employeeId: assignment.employeeId,\n                        projectId: assignment.projectId,\n                        hours: \"\".concat(assignment.hours, ' (raw: \"').concat(rawHours, '\", type: ').concat(typeof rawHours, \")\"),\n                        rawDate: rawDate,\n                        storedDate: assignment.date,\n                        displayWeek: assignment.week,\n                        allColumns: Object.keys(row).join(', ')\n                    });\n                }\n                return assignment;\n            });\n            console.log(\"  ✓ Parsed \".concat(result.assignments.length, \" assignments\"));\n        }\n        console.log('  Unique weeks found:', [\n            ...new Set(result.assignments.map((a)=>a.week))\n        ]);\n    } else {\n        console.log('⚠️ No Assignments sheet found in workbook');\n    }\n    // Parse Skills sheet (optional)\n    if (workbook.Sheets['Skills']) {\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.sheet_to_json(workbook.Sheets['Skills']);\n        const skillSet = new Set();\n        sheet.forEach((row)=>{\n            Object.keys(row).forEach((key)=>{\n                if (key !== 'Employee' && key !== 'ID' && key !== 'Name') {\n                    skillSet.add(key);\n                }\n            });\n        });\n        result.skills = Array.from(skillSet);\n    } else {\n        // Extract skills from employees\n        const skillSet = new Set();\n        result.employees.forEach((emp)=>{\n            Object.keys(emp.skills).forEach((skill)=>skillSet.add(skill));\n        });\n        result.skills = Array.from(skillSet);\n    }\n    // Extract teams\n    const teamSet = new Set([\n        'All Teams'\n    ]);\n    result.employees.forEach((emp)=>{\n        if (emp.team) teamSet.add(emp.team);\n    });\n    result.teams = Array.from(teamSet);\n    return result;\n}\nfunction parseSkills(row) {\n    const skills = {};\n    const excludeFields = [\n        'Name',\n        'Employee',\n        'Email',\n        'ID',\n        'id',\n        'Max Hours',\n        'Team'\n    ];\n    Object.keys(row).forEach((key)=>{\n        if (!excludeFields.includes(key)) {\n            const value = row[key];\n            if (value && value !== 'None' && value !== '') {\n                // Try to parse as proficiency level\n                if ([\n                    'Beginner',\n                    'Intermediate',\n                    'Expert'\n                ].includes(value)) {\n                    skills[key] = value;\n                } else if (typeof value === 'number') {\n                    // Convert numeric values to proficiency levels\n                    if (value >= 3) skills[key] = 'Expert';\n                    else if (value >= 2) skills[key] = 'Intermediate';\n                    else if (value >= 1) skills[key] = 'Beginner';\n                } else if (value) {\n                    // Default to Intermediate for any other non-empty value\n                    skills[key] = 'Intermediate';\n                }\n            }\n        }\n    });\n    return skills;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/excel/parser.ts\n"));

/***/ })

});
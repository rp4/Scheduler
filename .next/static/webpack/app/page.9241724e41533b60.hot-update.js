"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/excel/parser.ts":
/*!*****************************!*\
  !*** ./lib/excel/parser.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseExcelFile: () => (/* binding */ parseExcelFile)\n/* harmony export */ });\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n/* harmony import */ var _lib_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/utils */ \"(app-pages-browser)/./lib/utils.ts\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/isValid.js\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/startOfWeek.js\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/format.js\");\n/* harmony import */ var _barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=format,isValid,parse,startOfWeek!=!date-fns */ \"(app-pages-browser)/./node_modules/date-fns/parse.js\");\n\n\n\n// Function to normalize date to yyyy-MM-dd format (Monday of the week)\nfunction normalizeDateToMonday(weekValue) {\n    if (!weekValue) return (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.getCurrentWeek)();\n    // Handle Date objects from Excel parsing\n    if (weekValue instanceof Date && (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(weekValue)) {\n        const monday = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.startOfWeek)(weekValue, {\n            weekStartsOn: 1\n        });\n        const formatted = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(monday, 'MMM d').toUpperCase();\n        console.log('    \\uD83D\\uDCC5 Date object week -> Monday: \"'.concat(formatted, '\"'));\n        return formatted;\n    }\n    // Handle Excel date numbers\n    if (typeof weekValue === 'number' && weekValue > 0) {\n        const excelDate = new Date((weekValue - 25569) * 86400 * 1000);\n        if ((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(excelDate)) {\n            const monday = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.startOfWeek)(excelDate, {\n                weekStartsOn: 1\n            });\n            const formatted = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(monday, 'MMM d').toUpperCase();\n            console.log(\"    \\uD83D\\uDCC5 Excel number \".concat(weekValue, ' -> Monday: \"').concat(formatted, '\"'));\n            return formatted;\n        }\n    }\n    const weekStr = String(weekValue).trim();\n    // Priority: yyyy-MM-dd format (most common in Excel)\n    if (/^\\d{4}-\\d{2}-\\d{2}/.test(weekStr)) {\n        try {\n            // Handle both yyyy-MM-dd and potential datetime strings\n            const dateOnly = weekStr.split('T')[0] // Remove time if present\n            ;\n            const parsed = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_4__.parse)(dateOnly, 'yyyy-MM-dd', new Date());\n            if ((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(parsed)) {\n                // If it's already a Monday, use it directly; otherwise convert to Monday\n                const dayOfWeek = parsed.getDay();\n                const isMonday = dayOfWeek === 1;\n                const targetDate = isMonday ? parsed : (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.startOfWeek)(parsed, {\n                    weekStartsOn: 1\n                });\n                const formatted = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(targetDate, 'MMM d').toUpperCase();\n                if (isMonday) {\n                    console.log('    \\uD83D\\uDCC5 Date \"'.concat(dateOnly, '\" is already Monday -> \"').concat(formatted, '\"'));\n                } else {\n                    console.log('    \\uD83D\\uDCC5 Converted \"'.concat(dateOnly, '\" (').concat((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(parsed, 'EEEE'), ') -> Monday: \"').concat(formatted, '\"'));\n                }\n                return formatted;\n            }\n        } catch (e) {\n            console.warn('    ⚠️ Failed to parse yyyy-MM-dd format: \"'.concat(weekStr, '\"'), e);\n        }\n    }\n    // Try other date formats\n    const dateFormats = [\n        'MM/dd/yyyy',\n        'M/d/yyyy',\n        'MMM d yyyy',\n        'MMM d',\n        'd-MMM',\n        'd-MMM-yy',\n        'd-MMM-yyyy'\n    ];\n    for (const fmt of dateFormats){\n        try {\n            const parsed = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_4__.parse)(weekStr, fmt, new Date());\n            if ((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(parsed)) {\n                // Convert to Monday of that week to match HoursGrid\n                const monday = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.startOfWeek)(parsed, {\n                    weekStartsOn: 1\n                });\n                const formatted = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(monday, 'MMM d').toUpperCase();\n                console.log('    \\uD83D\\uDCC5 Parsed week \"'.concat(weekStr, '\" (format: ').concat(fmt, ') -> Monday: \"').concat(formatted, '\"'));\n                return formatted;\n            }\n        } catch (e) {\n        // Continue to next format\n        }\n    }\n    // If week is already in the expected format (e.g., \"JAN 15\")\n    if (/^[A-Z]{3}\\s+\\d{1,2}$/i.test(weekStr)) {\n        // Parse it and convert to Monday of that week\n        try {\n            const parsed = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_4__.parse)(weekStr, 'MMM d', new Date());\n            if ((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(parsed)) {\n                const monday = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.startOfWeek)(parsed, {\n                    weekStartsOn: 1\n                });\n                const formatted = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(monday, 'MMM d').toUpperCase();\n                console.log('    \\uD83D\\uDCC5 Normalized week \"'.concat(weekStr, '\" -> Monday: \"').concat(formatted, '\"'));\n                return formatted;\n            }\n        } catch (e) {\n            // If parsing fails, return as is\n            return weekStr.toUpperCase();\n        }\n    }\n    // If it's a Date object\n    if (weekValue instanceof Date && (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(weekValue)) {\n        const monday = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.startOfWeek)(weekValue, {\n            weekStartsOn: 1\n        });\n        return (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(monday, 'MMM d').toUpperCase();\n    }\n    // If it's an Excel date number\n    if (typeof weekValue === 'number' && weekValue > 0) {\n        const excelDate = new Date((weekValue - 25569) * 86400 * 1000);\n        if ((0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_1__.isValid)(excelDate)) {\n            const monday = (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_2__.startOfWeek)(excelDate, {\n                weekStartsOn: 1\n            });\n            return (0,_barrel_optimize_names_format_isValid_parse_startOfWeek_date_fns__WEBPACK_IMPORTED_MODULE_3__.format)(monday, 'MMM d').toUpperCase();\n        }\n    }\n    console.warn('  ⚠️ Could not parse week format: \"'.concat(weekStr, '\", using current week'));\n    return (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.getCurrentWeek)();\n}\nasync function parseExcelFile(file) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (e)=>{\n            try {\n                var _e_target;\n                console.log('📊 Starting Excel parsing...');\n                const data = new Uint8Array((_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result);\n                const workbook = xlsx__WEBPACK_IMPORTED_MODULE_5__.read(data, {\n                    type: 'array',\n                    cellDates: true\n                });\n                console.log('📋 Workbook sheets found:', Object.keys(workbook.Sheets));\n                const result = parseWorkbook(workbook);\n                console.log('✅ Parsing complete:', {\n                    employees: result.employees.length,\n                    projects: result.projects.length,\n                    assignments: result.assignments.length,\n                    skills: result.skills.length,\n                    teams: result.teams.length\n                });\n                resolve(result);\n            } catch (error) {\n                console.error('❌ Error parsing Excel:', error);\n                reject(error);\n            }\n        };\n        reader.onerror = ()=>reject(new Error('Failed to read file'));\n        reader.readAsArrayBuffer(file);\n    });\n}\nfunction parseWorkbook(workbook) {\n    const result = {\n        employees: [],\n        projects: [],\n        assignments: [],\n        skills: [],\n        teams: [\n            'All Teams'\n        ]\n    };\n    // Parse Employees sheet\n    if (workbook.Sheets['Employees']) {\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.sheet_to_json(workbook.Sheets['Employees']);\n        result.employees = sheet.map((row)=>({\n                id: row.ID || row.id || (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                name: row.Name || row.Employee || '',\n                email: row.Email || '',\n                maxHours: Number(row['Max Hours']) || 40,\n                team: row.Team || 'Default',\n                skills: parseSkills(row)\n            }));\n    }\n    // Parse Projects sheet\n    if (workbook.Sheets['Projects']) {\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.sheet_to_json(workbook.Sheets['Projects']);\n        result.projects = sheet.map((row)=>({\n                id: row.ID || row.id || (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                name: row.Name || row.Project || '',\n                startDate: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.parseDate)(row['Start Date']) || new Date(),\n                endDate: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.parseDate)(row['End Date']) || new Date(),\n                requiredSkills: row['Required Skills'] ? String(row['Required Skills']).split(',').map((s)=>s.trim()) : [],\n                portfolio: row.Portfolio || ''\n            }));\n    }\n    // Parse Assignments sheet\n    if (workbook.Sheets['Assignments']) {\n        console.log('📅 Parsing Assignments sheet...');\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.sheet_to_json(workbook.Sheets['Assignments']);\n        console.log(\"  Found \".concat(sheet.length, \" assignment rows\"));\n        // Log first few rows for debugging\n        if (sheet.length > 0) {\n            console.log('  Sample assignment row:', sheet[0]);\n            console.log('  Assignment column headers:', Object.keys(sheet[0]));\n        }\n        result.assignments = sheet.map((row, index)=>{\n            // Check all possible column names for week/date\n            const rawWeek = row.Week || row['Week'] || row.Date || row['Date'] || row.week || row.date;\n            const normalizedWeek = normalizeWeekFormat(rawWeek);\n            // Parse hours with better handling\n            const rawHours = row.Hours || row['Hours'] || row.hours || 0;\n            const parsedHours = typeof rawHours === 'string' ? parseFloat(rawHours) || 0 : Number(rawHours) || 0;\n            const assignment = {\n                id: (0,_lib_utils__WEBPACK_IMPORTED_MODULE_0__.generateId)(),\n                employeeId: row['Employee ID'] || row.Employee || row['Employee'] || row['employee'] || '',\n                projectId: row['Project ID'] || row.Project || row['Project'] || row['project'] || '',\n                hours: parsedHours,\n                week: normalizedWeek\n            };\n            // Debug log for first few assignments\n            if (index < 3) {\n                console.log(\"  Assignment \".concat(index + 1, \":\"), {\n                    employeeId: assignment.employeeId,\n                    projectId: assignment.projectId,\n                    hours: \"\".concat(assignment.hours, ' (raw: \"').concat(rawHours, '\", type: ').concat(typeof rawHours, \")\"),\n                    rawWeek: rawWeek,\n                    normalizedWeek: assignment.week,\n                    allColumns: Object.keys(row).join(', ')\n                });\n            }\n            return assignment;\n        });\n        console.log(\"  ✓ Parsed \".concat(result.assignments.length, \" assignments\"));\n        console.log('  Unique weeks found:', [\n            ...new Set(result.assignments.map((a)=>a.week))\n        ]);\n    } else {\n        console.log('⚠️ No Assignments sheet found in workbook');\n    }\n    // Parse Skills sheet (optional)\n    if (workbook.Sheets['Skills']) {\n        const sheet = xlsx__WEBPACK_IMPORTED_MODULE_5__.utils.sheet_to_json(workbook.Sheets['Skills']);\n        const skillSet = new Set();\n        sheet.forEach((row)=>{\n            Object.keys(row).forEach((key)=>{\n                if (key !== 'Employee' && key !== 'ID' && key !== 'Name') {\n                    skillSet.add(key);\n                }\n            });\n        });\n        result.skills = Array.from(skillSet);\n    } else {\n        // Extract skills from employees\n        const skillSet = new Set();\n        result.employees.forEach((emp)=>{\n            Object.keys(emp.skills).forEach((skill)=>skillSet.add(skill));\n        });\n        result.skills = Array.from(skillSet);\n    }\n    // Extract teams\n    const teamSet = new Set([\n        'All Teams'\n    ]);\n    result.employees.forEach((emp)=>{\n        if (emp.team) teamSet.add(emp.team);\n    });\n    result.teams = Array.from(teamSet);\n    return result;\n}\nfunction parseSkills(row) {\n    const skills = {};\n    const excludeFields = [\n        'Name',\n        'Employee',\n        'Email',\n        'ID',\n        'id',\n        'Max Hours',\n        'Team'\n    ];\n    Object.keys(row).forEach((key)=>{\n        if (!excludeFields.includes(key)) {\n            const value = row[key];\n            if (value && value !== 'None' && value !== '') {\n                // Try to parse as proficiency level\n                if ([\n                    'Beginner',\n                    'Intermediate',\n                    'Expert'\n                ].includes(value)) {\n                    skills[key] = value;\n                } else if (typeof value === 'number') {\n                    // Convert numeric values to proficiency levels\n                    if (value >= 3) skills[key] = 'Expert';\n                    else if (value >= 2) skills[key] = 'Intermediate';\n                    else if (value >= 1) skills[key] = 'Beginner';\n                } else if (value) {\n                    // Default to Intermediate for any other non-empty value\n                    skills[key] = 'Intermediate';\n                }\n            }\n        }\n    });\n    return skills;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/excel/parser.ts\n"));

/***/ })

});
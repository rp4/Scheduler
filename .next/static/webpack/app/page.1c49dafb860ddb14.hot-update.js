"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/excel/workerLoader.ts":
/*!***********************************!*\
  !*** ./lib/excel/workerLoader.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createExcelParserWorker: () => (/* binding */ createExcelParserWorker)\n/* harmony export */ });\n// Worker loader that works with Next.js\nfunction createExcelParserWorker() {\n    if ( false || typeof Worker === 'undefined') {\n        console.log('Worker not available: window or Worker undefined');\n        return null;\n    }\n    console.log('Creating Excel parser worker...');\n    try {\n        // Create worker with inline code for Next.js compatibility\n        const workerCode = \"\\n      importScripts('https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js');\\n      \\n      // Generate unique ID\\n      function generateId() {\\n        return Date.now().toString() + '-' + Math.random().toString(36).substr(2, 9);\\n      }\\n\\n      // Parse date from various formats\\n      function parseDate(value) {\\n        if (!value) return null;\\n        \\n        if (value instanceof Date) return value;\\n        \\n        if (typeof value === 'number') {\\n          // Excel date number\\n          return new Date((value - 25569) * 86400 * 1000);\\n        }\\n        \\n        if (typeof value === 'string') {\\n          const date = new Date(value);\\n          return isNaN(date.getTime()) ? null : date;\\n        }\\n        \\n        return null;\\n      }\\n\\n      // Normalize date to Monday of the week\\n      function normalizeDateToMonday(dateValue) {\\n        const parsed = parseDate(dateValue);\\n        if (!parsed) {\\n          const now = new Date();\\n          return {\\n            date: now.toISOString().split('T')[0],\\n            week: now.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }).toUpperCase()\\n          };\\n        }\\n        \\n        // Get Monday of the week\\n        const day = parsed.getDay();\\n        const diff = parsed.getDate() - day + (day === 0 ? -6 : 1);\\n        const monday = new Date(parsed.setDate(diff));\\n        \\n        return {\\n          date: monday.toISOString().split('T')[0],\\n          week: monday.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }).toUpperCase()\\n        };\\n      }\\n\\n      // Parse skills from row data\\n      function parseSkills(row) {\\n        const skills = {};\\n        const excludeFields = ['Name', 'Employee', 'Email', 'ID', 'id', 'Max Hours', 'Team'];\\n        \\n        Object.keys(row).forEach(key => {\\n          if (!excludeFields.includes(key)) {\\n            const value = row[key];\\n            if (value && value !== 'None' && value !== '') {\\n              if (['Beginner', 'Intermediate', 'Expert'].includes(value)) {\\n                skills[key] = value;\\n              } else if (typeof value === 'number') {\\n                if (value >= 3) skills[key] = 'Expert';\\n                else if (value >= 2) skills[key] = 'Intermediate';\\n                else if (value >= 1) skills[key] = 'Beginner';\\n              } else if (value) {\\n                skills[key] = 'Intermediate';\\n              }\\n            }\\n          }\\n        });\\n        \\n        return skills;\\n      }\\n\\n      // Main parsing function\\n      function parseWorkbook(workbook, onProgress) {\\n        const result = {\\n          employees: [],\\n          projects: [],\\n          assignments: [],\\n          skills: [],\\n          teams: ['All Teams'],\\n        };\\n\\n        let progress = 0;\\n        onProgress(10);\\n\\n        // Parse Employees sheet\\n        if (workbook.Sheets['Employees']) {\\n          const sheet = XLSX.utils.sheet_to_json(workbook.Sheets['Employees']);\\n          result.employees = sheet.map((row) => ({\\n            id: row.ID || row.id || generateId(),\\n            name: row.Name || row.Employee || '',\\n            email: row.Email || '',\\n            maxHours: Number(row['Max Hours']) || 40,\\n            team: row.Team || 'Default',\\n            skills: parseSkills(row),\\n          }));\\n          progress = 30;\\n          onProgress(progress);\\n        }\\n\\n        // Parse Projects sheet\\n        if (workbook.Sheets['Projects']) {\\n          const sheet = XLSX.utils.sheet_to_json(workbook.Sheets['Projects']);\\n          result.projects = sheet.map((row) => ({\\n            id: row.ID || row.id || generateId(),\\n            name: row.Name || row.Project || '',\\n            startDate: parseDate(row['Start Date']) || new Date(),\\n            endDate: parseDate(row['End Date']) || new Date(),\\n            requiredSkills: row['Required Skills'] \\n              ? String(row['Required Skills']).split(',').map(s => s.trim())\\n              : [],\\n            portfolio: row.Portfolio || '',\\n          }));\\n          progress = 50;\\n          onProgress(progress);\\n        }\\n\\n        // Parse Assignments sheet\\n        if (workbook.Sheets['Assignments']) {\\n          const sheet = XLSX.utils.sheet_to_json(workbook.Sheets['Assignments']);\\n          const totalRows = sheet.length;\\n          \\n          // Check for pivot format\\n          const firstRow = sheet[0] || {};\\n          const columns = Object.keys(firstRow);\\n          const dateColumns = columns.filter(col => {\\n            return /^\\\\d{4}-\\\\d{2}-\\\\d{2}/.test(col) || \\n                   /^\\\\d{1,2}\\\\/\\\\d{1,2}\\\\/\\\\d{4}/.test(col) ||\\n                   /^[A-Z][a-z]{2}\\\\s+\\\\d{1,2}/.test(col);\\n          });\\n          \\n          if (dateColumns.length > 0) {\\n            // Pivot format\\n            result.assignments = [];\\n            let processedRows = 0;\\n            \\n            sheet.forEach((row) => {\\n              const employeeIdOrName = row.Employee || row['Employee'] || row['Employee ID'] || '';\\n              const projectIdOrName = row.Project || row['Project'] || row['Project ID'] || '';\\n              \\n              if (!employeeIdOrName || !projectIdOrName) return;\\n              \\n              let employeeId = employeeIdOrName;\\n              const employeeById = result.employees.find(e => e.id === employeeIdOrName);\\n              const employeeByName = result.employees.find(e => e.name === employeeIdOrName);\\n              if (!employeeById && employeeByName) {\\n                employeeId = employeeByName.id;\\n              }\\n              \\n              let projectId = projectIdOrName;\\n              const projectById = result.projects.find(p => p.id === projectIdOrName);\\n              const projectByName = result.projects.find(p => p.name === projectIdOrName);\\n              if (!projectById && projectByName) {\\n                projectId = projectByName.id;\\n              }\\n              \\n              dateColumns.forEach(dateCol => {\\n                const hours = row[dateCol];\\n                if (hours && Number(hours) > 0) {\\n                  const normalized = normalizeDateToMonday(dateCol);\\n                  result.assignments.push({\\n                    id: generateId(),\\n                    employeeId: employeeId,\\n                    projectId: projectId,\\n                    hours: Number(hours),\\n                    week: normalized.week,\\n                    date: normalized.date\\n                  });\\n                }\\n              });\\n              \\n              processedRows++;\\n              if (processedRows % 10 === 0) {\\n                const assignmentProgress = 50 + (processedRows / totalRows) * 40;\\n                onProgress(Math.min(90, assignmentProgress));\\n              }\\n            });\\n          } else {\\n            // Traditional format\\n            result.assignments = sheet.map((row, index) => {\\n              const rawDate = row.Week || row['Week'] || row.Date || row['Date'] || row.week || row.date;\\n              const normalized = normalizeDateToMonday(rawDate);\\n              \\n              const rawHours = row.Hours || row['Hours'] || row.hours || 0;\\n              const parsedHours = typeof rawHours === 'string' ? parseFloat(rawHours) || 0 : Number(rawHours) || 0;\\n              \\n              const employeeIdOrName = row['Employee ID'] || row.Employee || row['Employee'] || row['employee'] || '';\\n              const projectIdOrName = row['Project ID'] || row.Project || row['Project'] || row['project'] || '';\\n              \\n              let employeeId = employeeIdOrName;\\n              const employeeById = result.employees.find(e => e.id === employeeIdOrName);\\n              const employeeByName = result.employees.find(e => e.name === employeeIdOrName);\\n              if (!employeeById && employeeByName) {\\n                employeeId = employeeByName.id;\\n              }\\n              \\n              let projectId = projectIdOrName;\\n              const projectById = result.projects.find(p => p.id === projectIdOrName);\\n              const projectByName = result.projects.find(p => p.name === projectIdOrName);\\n              if (!projectById && projectByName) {\\n                projectId = projectByName.id;\\n              }\\n              \\n              if (index % 50 === 0) {\\n                const assignmentProgress = 50 + (index / totalRows) * 40;\\n                onProgress(Math.min(90, assignmentProgress));\\n              }\\n              \\n              return {\\n                id: generateId(),\\n                employeeId: employeeId,\\n                projectId: projectId,\\n                hours: parsedHours,\\n                week: normalized.week,\\n                date: normalized.date\\n              };\\n            });\\n          }\\n          \\n          progress = 90;\\n          onProgress(progress);\\n        }\\n\\n        // Parse Skills sheet (optional)\\n        if (workbook.Sheets['Skills']) {\\n          const sheet = XLSX.utils.sheet_to_json(workbook.Sheets['Skills']);\\n          const skillSet = new Set();\\n          \\n          sheet.forEach((row) => {\\n            Object.keys(row).forEach(key => {\\n              if (key !== 'Employee' && key !== 'ID' && key !== 'Name') {\\n                skillSet.add(key);\\n              }\\n            });\\n          });\\n          \\n          result.skills = Array.from(skillSet);\\n        } else {\\n          // Extract skills from employees\\n          const skillSet = new Set();\\n          result.employees.forEach(emp => {\\n            Object.keys(emp.skills).forEach(skill => skillSet.add(skill));\\n          });\\n          result.skills = Array.from(skillSet);\\n        }\\n\\n        // Extract teams\\n        const teamSet = new Set(['All Teams']);\\n        result.employees.forEach(emp => {\\n          if (emp.team) teamSet.add(emp.team);\\n        });\\n        result.teams = Array.from(teamSet);\\n\\n        onProgress(100);\\n        return result;\\n      }\\n\\n      // Message handler\\n      self.addEventListener('message', async (event) => {\\n        const { type, data } = event.data;\\n        \\n        if (type === 'parse') {\\n          try {\\n            const { arrayBuffer } = data;\\n            \\n            // Post initial progress\\n            self.postMessage({ type: 'progress', progress: 5 });\\n            \\n            // Parse the workbook\\n            const workbook = XLSX.read(new Uint8Array(arrayBuffer), { type: 'array', cellDates: true });\\n            \\n            if (!workbook.Sheets || Object.keys(workbook.Sheets).length === 0) {\\n              throw new Error('No sheets found in the Excel file');\\n            }\\n            \\n            // Parse with progress updates\\n            const result = parseWorkbook(workbook, (progress) => {\\n              self.postMessage({ type: 'progress', progress });\\n            });\\n            \\n            // Send success result\\n            self.postMessage({ \\n              type: 'success', \\n              data: result \\n            });\\n          } catch (error) {\\n            // Send error\\n            self.postMessage({ \\n              type: 'error', \\n              error: error.message || 'Unknown error occurred' \\n            });\\n          }\\n        }\\n      });\\n    \";\n        const blob = new Blob([\n            workerCode\n        ], {\n            type: 'application/javascript'\n        });\n        const workerUrl = URL.createObjectURL(blob);\n        console.log('Worker URL created:', workerUrl);\n        const worker = new Worker(workerUrl);\n        console.log('Worker instance created successfully');\n        return worker;\n    } catch (error) {\n        console.error('Failed to create worker:', error);\n        return null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/excel/workerLoader.ts\n"));

/***/ })

});
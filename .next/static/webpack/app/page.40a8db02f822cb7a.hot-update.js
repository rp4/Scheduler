"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/excel/parserWithWorker.ts":
/*!***************************************!*\
  !*** ./lib/excel/parserWithWorker.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseExcelFileFallback: () => (/* binding */ parseExcelFileFallback),\n/* harmony export */   parseExcelFileWithWorker: () => (/* binding */ parseExcelFileWithWorker),\n/* harmony export */   parseExcelSafe: () => (/* binding */ parseExcelSafe)\n/* harmony export */ });\n/* harmony import */ var _workerLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./workerLoader */ \"(app-pages-browser)/./lib/excel/workerLoader.ts\");\n\n// Function to parse Excel file using Web Worker\nasync function parseExcelFileWithWorker(file, onProgress) {\n    console.log('parseExcelFileWithWorker started');\n    return new Promise((resolve, reject)=>{\n        // Create a new worker\n        const worker = (0,_workerLoader__WEBPACK_IMPORTED_MODULE_0__.createExcelParserWorker)();\n        if (!worker) {\n            console.error('Worker creation returned null');\n            reject(new Error('Failed to create Web Worker'));\n            return;\n        }\n        console.log('Worker created, setting up event listeners...');\n        // Set up message handler\n        worker.addEventListener('message', (event)=>{\n            console.log('Worker message received:', event.data.type);\n            const { type } = event.data;\n            switch(type){\n                case 'progress':\n                    console.log('Progress update:', event.data.progress);\n                    if (onProgress) {\n                        onProgress(event.data.progress);\n                    }\n                    break;\n                case 'success':\n                    console.log('Parse success, data:', event.data.data);\n                    // Clean up worker\n                    worker.terminate();\n                    resolve(event.data.data);\n                    break;\n                case 'error':\n                    console.error('Parse error from worker:', event.data.error);\n                    // Clean up worker\n                    worker.terminate();\n                    reject(new Error(event.data.error));\n                    break;\n                default:\n                    console.warn('Unknown message type from worker:', type);\n            }\n        });\n        // Handle worker errors\n        worker.addEventListener('error', (error)=>{\n            worker.terminate();\n            reject(new Error(\"Worker error: \".concat(error.message)));\n        });\n        // Read file as array buffer\n        const reader = new FileReader();\n        console.log('Starting file reading...');\n        reader.onload = (e)=>{\n            var _e_target, _e_target1;\n            console.log('File read complete, size:', ((_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result) ? e.target.result.byteLength : 0);\n            if (!((_e_target1 = e.target) === null || _e_target1 === void 0 ? void 0 : _e_target1.result)) {\n                console.error('No file content found');\n                worker.terminate();\n                reject(new Error('Failed to read file content'));\n                return;\n            }\n            // Send array buffer to worker\n            const arrayBuffer = e.target.result;\n            console.log('Sending arrayBuffer to worker, size:', arrayBuffer.byteLength);\n            worker.postMessage({\n                type: 'parse',\n                data: {\n                    arrayBuffer\n                }\n            });\n            console.log('Message posted to worker');\n        };\n        reader.onerror = (error)=>{\n            console.error('FileReader error:', error);\n            worker.terminate();\n            reject(new Error('Failed to read file'));\n        };\n        console.log('Starting readAsArrayBuffer...');\n        reader.readAsArrayBuffer(file);\n    });\n}\n// Fallback to non-worker version if worker is not supported\nasync function parseExcelFileFallback(file) {\n    // Import the original parser dynamically to avoid bundling it when not needed\n    const { parseExcelFile } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor\"), __webpack_require__.e(\"_app-pages-browser_lib_excel_parser_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./parser */ \"(app-pages-browser)/./lib/excel/parser.ts\"));\n    return parseExcelFile(file);\n}\n// Main export that checks for worker support\nasync function parseExcelSafe(file, onProgress) {\n    console.log('parseExcelSafe called with file:', file.name);\n    // For now, always use fallback due to Worker issues\n    // TODO: Fix Worker implementation\n    console.log('Using main thread parsing (Worker temporarily disabled)...');\n    return parseExcelFileFallback(file);\n/*\n  // Check if Web Workers are supported\n  if (typeof Worker !== 'undefined') {\n    console.log('Web Workers supported, attempting worker parsing...')\n    try {\n      const result = await parseExcelFileWithWorker(file, onProgress)\n      console.log('Worker parsing successful')\n      return result\n    } catch (error) {\n      console.error('Worker parsing failed:', error)\n      console.log('Falling back to main thread parsing...')\n      return parseExcelFileFallback(file)\n    }\n  } else {\n    // No worker support, use fallback\n    console.warn('Web Workers not supported, using main thread parsing')\n    return parseExcelFileFallback(file)\n  }\n  */ }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/excel/parserWithWorker.ts\n"));

/***/ })

});
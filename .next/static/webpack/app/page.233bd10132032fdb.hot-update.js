"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/excel/parserWithWorker.ts":
/*!***************************************!*\
  !*** ./lib/excel/parserWithWorker.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseExcelFileFallback: () => (/* binding */ parseExcelFileFallback),\n/* harmony export */   parseExcelFileWithWorker: () => (/* binding */ parseExcelFileWithWorker),\n/* harmony export */   parseExcelSafe: () => (/* binding */ parseExcelSafe)\n/* harmony export */ });\n/* harmony import */ var _workerLoader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./workerLoader */ \"(app-pages-browser)/./lib/excel/workerLoader.ts\");\n\n// Function to parse Excel file using Web Worker\nasync function parseExcelFileWithWorker(file, onProgress) {\n    return new Promise((resolve, reject)=>{\n        // Create a new worker\n        const worker = (0,_workerLoader__WEBPACK_IMPORTED_MODULE_0__.createExcelParserWorker)();\n        if (!worker) {\n            reject(new Error('Failed to create Web Worker'));\n            return;\n        }\n        // Set up message handler\n        worker.addEventListener('message', (event)=>{\n            const { type } = event.data;\n            switch(type){\n                case 'progress':\n                    if (onProgress) {\n                        onProgress(event.data.progress);\n                    }\n                    break;\n                case 'success':\n                    // Clean up worker\n                    worker.terminate();\n                    resolve(event.data.data);\n                    break;\n                case 'error':\n                    // Clean up worker\n                    worker.terminate();\n                    reject(new Error(event.data.error));\n                    break;\n            }\n        });\n        // Handle worker errors\n        worker.addEventListener('error', (error)=>{\n            worker.terminate();\n            reject(new Error(\"Worker error: \".concat(error.message)));\n        });\n        // Read file as array buffer\n        const reader = new FileReader();\n        reader.onload = (e)=>{\n            var _e_target;\n            if (!((_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.result)) {\n                worker.terminate();\n                reject(new Error('Failed to read file content'));\n                return;\n            }\n            // Send array buffer to worker\n            const arrayBuffer = e.target.result;\n            worker.postMessage({\n                type: 'parse',\n                data: {\n                    arrayBuffer\n                }\n            });\n        };\n        reader.onerror = ()=>{\n            worker.terminate();\n            reject(new Error('Failed to read file'));\n        };\n        reader.readAsArrayBuffer(file);\n    });\n}\n// Fallback to non-worker version if worker is not supported\nasync function parseExcelFileFallback(file) {\n    // Import the original parser dynamically to avoid bundling it when not needed\n    const { parseExcelFile } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor\"), __webpack_require__.e(\"_app-pages-browser_lib_excel_parser_ts\")]).then(__webpack_require__.bind(__webpack_require__, /*! ./parser */ \"(app-pages-browser)/./lib/excel/parser.ts\"));\n    return parseExcelFile(file);\n}\n// Main export that checks for worker support\nasync function parseExcelSafe(file, onProgress) {\n    console.log('parseExcelSafe called with file:', file.name);\n    // Check if Web Workers are supported\n    if (typeof Worker !== 'undefined') {\n        console.log('Web Workers supported, attempting worker parsing...');\n        try {\n            const result = await parseExcelFileWithWorker(file, onProgress);\n            console.log('Worker parsing successful');\n            return result;\n        } catch (error) {\n            console.error('Worker parsing failed:', error);\n            console.log('Falling back to main thread parsing...');\n            return parseExcelFileFallback(file);\n        }\n    } else {\n        // No worker support, use fallback\n        console.warn('Web Workers not supported, using main thread parsing');\n        return parseExcelFileFallback(file);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9leGNlbC9wYXJzZXJXaXRoV29ya2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDd0Q7QUFFeEQsZ0RBQWdEO0FBQ3pDLGVBQWVDLHlCQUNwQkMsSUFBVSxFQUNWQyxVQUF1QztJQUV2QyxPQUFPLElBQUlDLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDM0Isc0JBQXNCO1FBQ3RCLE1BQU1DLFNBQVNQLHNFQUF1QkE7UUFFdEMsSUFBSSxDQUFDTyxRQUFRO1lBQ1hELE9BQU8sSUFBSUUsTUFBTTtZQUNqQjtRQUNGO1FBRUEseUJBQXlCO1FBQ3pCRCxPQUFPRSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUNDO1lBQ2xDLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUdELE1BQU1FLElBQUk7WUFFM0IsT0FBUUQ7Z0JBQ04sS0FBSztvQkFDSCxJQUFJUixZQUFZO3dCQUNkQSxXQUFXTyxNQUFNRSxJQUFJLENBQUNDLFFBQVE7b0JBQ2hDO29CQUNBO2dCQUVGLEtBQUs7b0JBQ0gsa0JBQWtCO29CQUNsQk4sT0FBT08sU0FBUztvQkFDaEJULFFBQVFLLE1BQU1FLElBQUksQ0FBQ0EsSUFBSTtvQkFDdkI7Z0JBRUYsS0FBSztvQkFDSCxrQkFBa0I7b0JBQ2xCTCxPQUFPTyxTQUFTO29CQUNoQlIsT0FBTyxJQUFJRSxNQUFNRSxNQUFNRSxJQUFJLENBQUNHLEtBQUs7b0JBQ2pDO1lBQ0o7UUFDRjtRQUVBLHVCQUF1QjtRQUN2QlIsT0FBT0UsZ0JBQWdCLENBQUMsU0FBUyxDQUFDTTtZQUNoQ1IsT0FBT08sU0FBUztZQUNoQlIsT0FBTyxJQUFJRSxNQUFNLGlCQUErQixPQUFkTyxNQUFNQyxPQUFPO1FBQ2pEO1FBRUEsNEJBQTRCO1FBQzVCLE1BQU1DLFNBQVMsSUFBSUM7UUFFbkJELE9BQU9FLE1BQU0sR0FBRyxDQUFDQztnQkFDVkE7WUFBTCxJQUFJLEdBQUNBLFlBQUFBLEVBQUVDLE1BQU0sY0FBUkQsZ0NBQUFBLFVBQVVFLE1BQU0sR0FBRTtnQkFDckJmLE9BQU9PLFNBQVM7Z0JBQ2hCUixPQUFPLElBQUlFLE1BQU07Z0JBQ2pCO1lBQ0Y7WUFFQSw4QkFBOEI7WUFDOUIsTUFBTWUsY0FBY0gsRUFBRUMsTUFBTSxDQUFDQyxNQUFNO1lBQ25DZixPQUFPaUIsV0FBVyxDQUFDO2dCQUNqQmIsTUFBTTtnQkFDTkMsTUFBTTtvQkFBRVc7Z0JBQVk7WUFDdEI7UUFDRjtRQUVBTixPQUFPUSxPQUFPLEdBQUc7WUFDZmxCLE9BQU9PLFNBQVM7WUFDaEJSLE9BQU8sSUFBSUUsTUFBTTtRQUNuQjtRQUVBUyxPQUFPUyxpQkFBaUIsQ0FBQ3hCO0lBQzNCO0FBQ0Y7QUFFQSw0REFBNEQ7QUFDckQsZUFBZXlCLHVCQUF1QnpCLElBQVU7SUFDckQsOEVBQThFO0lBQzlFLE1BQU0sRUFBRTBCLGNBQWMsRUFBRSxHQUFHLE1BQU0sK09BQWtCO0lBQ25ELE9BQU9BLGVBQWUxQjtBQUN4QjtBQUVBLDZDQUE2QztBQUN0QyxlQUFlMkIsZUFDcEIzQixJQUFVLEVBQ1ZDLFVBQXVDO0lBRXZDMkIsUUFBUUMsR0FBRyxDQUFDLG9DQUFvQzdCLEtBQUs4QixJQUFJO0lBRXpELHFDQUFxQztJQUNyQyxJQUFJLE9BQU9DLFdBQVcsYUFBYTtRQUNqQ0gsUUFBUUMsR0FBRyxDQUFDO1FBQ1osSUFBSTtZQUNGLE1BQU1ULFNBQVMsTUFBTXJCLHlCQUF5QkMsTUFBTUM7WUFDcEQyQixRQUFRQyxHQUFHLENBQUM7WUFDWixPQUFPVDtRQUNULEVBQUUsT0FBT1AsT0FBTztZQUNkZSxRQUFRZixLQUFLLENBQUMsMEJBQTBCQTtZQUN4Q2UsUUFBUUMsR0FBRyxDQUFDO1lBQ1osT0FBT0osdUJBQXVCekI7UUFDaEM7SUFDRixPQUFPO1FBQ0wsa0NBQWtDO1FBQ2xDNEIsUUFBUUksSUFBSSxDQUFDO1FBQ2IsT0FBT1AsdUJBQXVCekI7SUFDaEM7QUFDRiIsInNvdXJjZXMiOlsiL2hvbWUvcDQ3Mi9TY2hlZHVsZXIvbGliL2V4Y2VsL3BhcnNlcldpdGhXb3JrZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZWR1bGVEYXRhIH0gZnJvbSAnQC90eXBlcy9zY2hlZHVsZSdcbmltcG9ydCB7IGNyZWF0ZUV4Y2VsUGFyc2VyV29ya2VyIH0gZnJvbSAnLi93b3JrZXJMb2FkZXInXG5cbi8vIEZ1bmN0aW9uIHRvIHBhcnNlIEV4Y2VsIGZpbGUgdXNpbmcgV2ViIFdvcmtlclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBhcnNlRXhjZWxGaWxlV2l0aFdvcmtlcihcbiAgZmlsZTogRmlsZSxcbiAgb25Qcm9ncmVzcz86IChwcm9ncmVzczogbnVtYmVyKSA9PiB2b2lkXG4pOiBQcm9taXNlPFNjaGVkdWxlRGF0YT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vIENyZWF0ZSBhIG5ldyB3b3JrZXJcbiAgICBjb25zdCB3b3JrZXIgPSBjcmVhdGVFeGNlbFBhcnNlcldvcmtlcigpXG4gICAgXG4gICAgaWYgKCF3b3JrZXIpIHtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgV2ViIFdvcmtlcicpKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIFxuICAgIC8vIFNldCB1cCBtZXNzYWdlIGhhbmRsZXJcbiAgICB3b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgeyB0eXBlIH0gPSBldmVudC5kYXRhXG4gICAgICBcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdwcm9ncmVzcyc6XG4gICAgICAgICAgaWYgKG9uUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIG9uUHJvZ3Jlc3MoZXZlbnQuZGF0YS5wcm9ncmVzcylcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgICBcbiAgICAgICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICAgICAgLy8gQ2xlYW4gdXAgd29ya2VyXG4gICAgICAgICAgd29ya2VyLnRlcm1pbmF0ZSgpXG4gICAgICAgICAgcmVzb2x2ZShldmVudC5kYXRhLmRhdGEpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgICBcbiAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgIC8vIENsZWFuIHVwIHdvcmtlclxuICAgICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKVxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoZXZlbnQuZGF0YS5lcnJvcikpXG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9KVxuICAgIFxuICAgIC8vIEhhbmRsZSB3b3JrZXIgZXJyb3JzXG4gICAgd29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGVycm9yKSA9PiB7XG4gICAgICB3b3JrZXIudGVybWluYXRlKClcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoYFdvcmtlciBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWApKVxuICAgIH0pXG4gICAgXG4gICAgLy8gUmVhZCBmaWxlIGFzIGFycmF5IGJ1ZmZlclxuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICBcbiAgICByZWFkZXIub25sb2FkID0gKGUpID0+IHtcbiAgICAgIGlmICghZS50YXJnZXQ/LnJlc3VsdCkge1xuICAgICAgICB3b3JrZXIudGVybWluYXRlKClcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignRmFpbGVkIHRvIHJlYWQgZmlsZSBjb250ZW50JykpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTZW5kIGFycmF5IGJ1ZmZlciB0byB3b3JrZXJcbiAgICAgIGNvbnN0IGFycmF5QnVmZmVyID0gZS50YXJnZXQucmVzdWx0IGFzIEFycmF5QnVmZmVyXG4gICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAncGFyc2UnLFxuICAgICAgICBkYXRhOiB7IGFycmF5QnVmZmVyIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIFxuICAgIHJlYWRlci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgd29ya2VyLnRlcm1pbmF0ZSgpXG4gICAgICByZWplY3QobmV3IEVycm9yKCdGYWlsZWQgdG8gcmVhZCBmaWxlJykpXG4gICAgfVxuICAgIFxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihmaWxlKVxuICB9KVxufVxuXG4vLyBGYWxsYmFjayB0byBub24td29ya2VyIHZlcnNpb24gaWYgd29ya2VyIGlzIG5vdCBzdXBwb3J0ZWRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZUV4Y2VsRmlsZUZhbGxiYWNrKGZpbGU6IEZpbGUpOiBQcm9taXNlPFNjaGVkdWxlRGF0YT4ge1xuICAvLyBJbXBvcnQgdGhlIG9yaWdpbmFsIHBhcnNlciBkeW5hbWljYWxseSB0byBhdm9pZCBidW5kbGluZyBpdCB3aGVuIG5vdCBuZWVkZWRcbiAgY29uc3QgeyBwYXJzZUV4Y2VsRmlsZSB9ID0gYXdhaXQgaW1wb3J0KCcuL3BhcnNlcicpXG4gIHJldHVybiBwYXJzZUV4Y2VsRmlsZShmaWxlKVxufVxuXG4vLyBNYWluIGV4cG9ydCB0aGF0IGNoZWNrcyBmb3Igd29ya2VyIHN1cHBvcnRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwYXJzZUV4Y2VsU2FmZShcbiAgZmlsZTogRmlsZSxcbiAgb25Qcm9ncmVzcz86IChwcm9ncmVzczogbnVtYmVyKSA9PiB2b2lkXG4pOiBQcm9taXNlPFNjaGVkdWxlRGF0YT4ge1xuICBjb25zb2xlLmxvZygncGFyc2VFeGNlbFNhZmUgY2FsbGVkIHdpdGggZmlsZTonLCBmaWxlLm5hbWUpXG4gIFxuICAvLyBDaGVjayBpZiBXZWIgV29ya2VycyBhcmUgc3VwcG9ydGVkXG4gIGlmICh0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUubG9nKCdXZWIgV29ya2VycyBzdXBwb3J0ZWQsIGF0dGVtcHRpbmcgd29ya2VyIHBhcnNpbmcuLi4nKVxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYXJzZUV4Y2VsRmlsZVdpdGhXb3JrZXIoZmlsZSwgb25Qcm9ncmVzcylcbiAgICAgIGNvbnNvbGUubG9nKCdXb3JrZXIgcGFyc2luZyBzdWNjZXNzZnVsJylcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignV29ya2VyIHBhcnNpbmcgZmFpbGVkOicsIGVycm9yKVxuICAgICAgY29uc29sZS5sb2coJ0ZhbGxpbmcgYmFjayB0byBtYWluIHRocmVhZCBwYXJzaW5nLi4uJylcbiAgICAgIHJldHVybiBwYXJzZUV4Y2VsRmlsZUZhbGxiYWNrKGZpbGUpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIE5vIHdvcmtlciBzdXBwb3J0LCB1c2UgZmFsbGJhY2tcbiAgICBjb25zb2xlLndhcm4oJ1dlYiBXb3JrZXJzIG5vdCBzdXBwb3J0ZWQsIHVzaW5nIG1haW4gdGhyZWFkIHBhcnNpbmcnKVxuICAgIHJldHVybiBwYXJzZUV4Y2VsRmlsZUZhbGxiYWNrKGZpbGUpXG4gIH1cbn0iXSwibmFtZXMiOlsiY3JlYXRlRXhjZWxQYXJzZXJXb3JrZXIiLCJwYXJzZUV4Y2VsRmlsZVdpdGhXb3JrZXIiLCJmaWxlIiwib25Qcm9ncmVzcyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwid29ya2VyIiwiRXJyb3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJ0eXBlIiwiZGF0YSIsInByb2dyZXNzIiwidGVybWluYXRlIiwiZXJyb3IiLCJtZXNzYWdlIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsImUiLCJ0YXJnZXQiLCJyZXN1bHQiLCJhcnJheUJ1ZmZlciIsInBvc3RNZXNzYWdlIiwib25lcnJvciIsInJlYWRBc0FycmF5QnVmZmVyIiwicGFyc2VFeGNlbEZpbGVGYWxsYmFjayIsInBhcnNlRXhjZWxGaWxlIiwicGFyc2VFeGNlbFNhZmUiLCJjb25zb2xlIiwibG9nIiwibmFtZSIsIldvcmtlciIsIndhcm4iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/excel/parserWithWorker.ts\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("common-_app-pages-browser_lib_utils_ts-_app-pages-browser_store_useScheduleStore_ts",{

/***/ "(app-pages-browser)/./store/useScheduleStore.ts":
/*!***********************************!*\
  !*** ./store/useScheduleStore.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useScheduleStore: () => (/* binding */ useScheduleStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n\n\nconst initialState = {\n    employees: [],\n    projects: [],\n    assignments: [],\n    skills: [],\n    teams: [\n        'All Teams'\n    ]\n};\nconst useScheduleStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set)=>({\n        ...initialState,\n        selectedTeam: 'All Teams',\n        dateRange: null,\n        hasHydrated: false,\n        overtimeSortTrigger: 0,\n        loadData: (data)=>{\n            console.log('ðŸ“¦ Storing data in Zustand:', {\n                employees: data.employees.length,\n                projects: data.projects.length,\n                assignments: data.assignments.length,\n                sampleAssignment: data.assignments[0],\n                assignmentStructure: data.assignments.slice(0, 3).map((a)=>({\n                        employeeId: a.employeeId,\n                        projectId: a.projectId,\n                        week: a.week,\n                        hours: a.hours\n                    }))\n            });\n            return set(()=>({\n                    ...data,\n                    teams: [\n                        'All Teams',\n                        ...Array.from(new Set(data.employees.map((e)=>e.team).filter((t)=>Boolean(t))))\n                    ],\n                    // Reset date range when loading new data so it recalculates based on new project dates\n                    dateRange: null\n                }));\n        },\n        setSelectedTeam: (team)=>set({\n                selectedTeam: team\n            }),\n        setDateRange: (range)=>set({\n                dateRange: range\n            }),\n        updateEmployee: (id, data)=>set((state)=>({\n                    employees: state.employees.map((e)=>e.id === id ? {\n                            ...e,\n                            ...data\n                        } : e)\n                })),\n        updateProject: (id, data)=>set((state)=>{\n                const oldProject = state.projects.find((p)=>p.id === id);\n                if (!oldProject) {\n                    return {\n                        projects: state.projects.map((p)=>p.id === id ? {\n                                ...p,\n                                ...data\n                            } : p)\n                    };\n                }\n                // Check if dates are being changed\n                const datesChanged = data.startDate && data.startDate !== oldProject.startDate || data.endDate && data.endDate !== oldProject.endDate;\n                if (datesChanged) {\n                    const oldStartDate = new Date(oldProject.startDate);\n                    const newStartDate = data.startDate ? new Date(data.startDate) : oldStartDate;\n                    const newEndDate = data.endDate ? new Date(data.endDate) : new Date(oldProject.endDate);\n                    // Calculate the week shift if start date changed\n                    const msPerWeek = 7 * 24 * 60 * 60 * 1000;\n                    const weekDifference = data.startDate ? Math.round((newStartDate.getTime() - oldStartDate.getTime()) / msPerWeek) : 0;\n                    // Update assignments for this project\n                    const updatedAssignments = state.assignments.map((a)=>{\n                        // Check if assignment belongs to this project\n                        if (a.projectId === id || a.projectId === oldProject.name) {\n                            let assignmentDate = null;\n                            let newAssignment = {\n                                ...a\n                            };\n                            // First, shift the assignment date if project moved\n                            if (weekDifference !== 0) {\n                                if (a.date) {\n                                    assignmentDate = new Date(a.date);\n                                    const shiftedDate = new Date(assignmentDate.getTime() + weekDifference * msPerWeek);\n                                    const newDateStr = shiftedDate.toISOString().split('T')[0];\n                                    const newWeekStr = shiftedDate.toLocaleDateString('en-US', {\n                                        month: 'short',\n                                        day: 'numeric'\n                                    }).toUpperCase();\n                                    newAssignment = {\n                                        ...newAssignment,\n                                        date: newDateStr,\n                                        week: newWeekStr\n                                    };\n                                    assignmentDate = shiftedDate;\n                                } else {\n                                    // For older data without date field, try to parse week string\n                                    const currentYear = new Date().getFullYear();\n                                    const monthMap = {\n                                        'JAN': 0,\n                                        'FEB': 1,\n                                        'MAR': 2,\n                                        'APR': 3,\n                                        'MAY': 4,\n                                        'JUN': 5,\n                                        'JUL': 6,\n                                        'AUG': 7,\n                                        'SEP': 8,\n                                        'OCT': 9,\n                                        'NOV': 10,\n                                        'DEC': 11\n                                    };\n                                    const parts = a.week.split(' ');\n                                    if (parts.length === 2) {\n                                        const month = monthMap[parts[0]];\n                                        const day = parseInt(parts[1]);\n                                        if (!isNaN(month) && !isNaN(day)) {\n                                            const oldDate = new Date(currentYear, month, day);\n                                            const projectYear = new Date(oldProject.startDate).getFullYear();\n                                            if (Math.abs(currentYear - projectYear) > 1) {\n                                                oldDate.setFullYear(projectYear);\n                                            }\n                                            const shiftedDate = new Date(oldDate.getTime() + weekDifference * msPerWeek);\n                                            const newDateStr = shiftedDate.toISOString().split('T')[0];\n                                            const newWeekStr = shiftedDate.toLocaleDateString('en-US', {\n                                                month: 'short',\n                                                day: 'numeric'\n                                            }).toUpperCase();\n                                            newAssignment = {\n                                                ...newAssignment,\n                                                date: newDateStr,\n                                                week: newWeekStr\n                                            };\n                                            assignmentDate = shiftedDate;\n                                        }\n                                    }\n                                }\n                            } else {\n                                // No shift, just get the current assignment date\n                                if (newAssignment.date) {\n                                    assignmentDate = new Date(newAssignment.date);\n                                }\n                            }\n                            // Now check if the assignment date is within the new project range\n                            // If not, set hours to 0\n                            if (assignmentDate) {\n                                // Add 6 days to get the end of the week (assignments are for full weeks)\n                                const weekEnd = new Date(assignmentDate.getTime() + 6 * 24 * 60 * 60 * 1000);\n                                // Check if the assignment week is outside the new project date range\n                                if (assignmentDate > newEndDate || weekEnd < newStartDate) {\n                                    // Assignment is completely outside project range - zero out hours\n                                    newAssignment = {\n                                        ...newAssignment,\n                                        hours: 0\n                                    };\n                                }\n                            }\n                            return newAssignment;\n                        }\n                        return a;\n                    });\n                    return {\n                        projects: state.projects.map((p)=>p.id === id ? {\n                                ...p,\n                                ...data\n                            } : p),\n                        assignments: updatedAssignments\n                    };\n                }\n                // If no date change, just update the project\n                return {\n                    projects: state.projects.map((p)=>p.id === id ? {\n                            ...p,\n                            ...data\n                        } : p)\n                };\n            }),\n        addProject: (project)=>set((state)=>{\n                // Generate a unique ID for the new project\n                const newId = \"project_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9));\n                const newProject = {\n                    ...project,\n                    id: newId\n                };\n                return {\n                    projects: [\n                        ...state.projects,\n                        newProject\n                    ]\n                };\n            }),\n        updateAssignment: (id, data)=>set((state)=>({\n                    assignments: state.assignments.map((a)=>a.id === id ? {\n                            ...a,\n                            ...data\n                        } : a)\n                })),\n        addAssignment: (assignment)=>set((state)=>({\n                    assignments: [\n                        ...state.assignments,\n                        assignment\n                    ]\n                })),\n        removeAssignment: (id)=>set((state)=>({\n                    assignments: state.assignments.filter((a)=>a.id !== id)\n                })),\n        clearData: ()=>set(initialState),\n        setHasHydrated: (state)=>set({\n                hasHydrated: state\n            }),\n        setOvertimeSortTrigger: ()=>set((state)=>({\n                    overtimeSortTrigger: state.overtimeSortTrigger + 1\n                }))\n    }), {\n    name: 'schedule-storage',\n    storage: (0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.createJSONStorage)(()=>localStorage),\n    partialize: (state)=>({\n            employees: state.employees,\n            projects: state.projects,\n            assignments: state.assignments,\n            skills: state.skills,\n            teams: state.teams,\n            selectedTeam: state.selectedTeam,\n            dateRange: state.dateRange\n        }),\n    onRehydrateStorage: ()=>(state)=>{\n            // Helper to parse date strings as local dates to avoid timezone issues\n            const parseLocalDate = (dateValue)=>{\n                if (dateValue instanceof Date) return dateValue;\n                const dateStr = String(dateValue);\n                // For YYYY-MM-DD format, parse as local date not UTC\n                if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n                    const [year, month, day] = dateStr.split('-').map(Number);\n                    return new Date(year, month - 1, day) // month is 0-indexed\n                    ;\n                }\n                return new Date(dateValue);\n            };\n            // Convert date strings back to Date objects after rehydration\n            if (state === null || state === void 0 ? void 0 : state.dateRange) {\n                state.dateRange = {\n                    startDate: parseLocalDate(state.dateRange.startDate),\n                    endDate: parseLocalDate(state.dateRange.endDate)\n                };\n            }\n            // Convert project dates back to Date objects\n            if (state === null || state === void 0 ? void 0 : state.projects) {\n                state.projects = state.projects.map((project)=>({\n                        ...project,\n                        startDate: parseLocalDate(project.startDate),\n                        endDate: parseLocalDate(project.endDate)\n                    }));\n            }\n            state === null || state === void 0 ? void 0 : state.setHasHydrated(true);\n        }\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/useScheduleStore.ts\n"));

/***/ })

});